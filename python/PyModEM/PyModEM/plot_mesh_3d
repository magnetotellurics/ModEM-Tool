#!/usr/bin/env python
import sys
import argparse
import numpy as np

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d

from mtpy import MTData
from mtpy.modeling import StructuredGrid3D

def get_mesh_grid(arry):
    return np.meshgrid(np.arange(arry.shape[1]), 
                       np.arange(arry.shape[0]),
                       -np.arange(arry.shape[2]))


description = '''Create a 3D plot of ModEM Mesh/Model/Grid/Rho file with an optional slice.'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('rho_file',
                    help='Filepath to the rho model',
                    type=str)
parser.add_argument('-f', 
                    '--outfile',
                    default=False,
                    help='If present, save the plot instead of showing it',
                    action='store_true')
parser.add_argument('-s', '--slices', 
                    help='X slice to take (to show within the mesh)',
                    nargs=2,
                    type=int,
                    required=True,
                    )

args = parser.parse_args()

mesh_file = args.rho_file

slices = [0]
slices.extend(args.slices)

mesh = StructuredGrid3D()
mesh.from_modem(mesh_file)

res = np.log(mesh.res_model[:,:,:])
kw = { 'vmin' : res.min(), 'vmax' : res.max(), 'levels' : np.linspace(res.min(), res.max(), 10)}


fig = plt.figure()
#fig, (ax1, ax2, ax3) = plt.subplots(1, 3, projection='3d')
#ax = fig.add_subplot(111, projection='3d')

for idx, slc in enumerate(slices):
    print("Slice: ", slc)
    ax = fig.add_subplot(1, 3, idx+1, projection='3d')

    res = np.log(mesh.res_model[:,:,:])
    print(res.shape)
    sys.exit(1)
    res = res[slc:-1,:,:]


    x, y, z = get_mesh_grid(res)
    
    _ = ax.contourf(x[:,:,0], y[:,:,0], res[:,:,0], zdir='z', offset=0, **kw)
    _ = ax.contourf(x[0,:,:], res[0,:,:], z[0,:,:], zdir='y', offset=0, **kw)
    C = ax.contourf(res[:,0,:], y[:,0,:], z[:,0,:], zdir='x', offset=0, **kw)

    xmin, xmax = x.min(), x.max()
    ymin, ymax = y.min(), y.max()
    zmin, zmax = z.min(), z.max()

    ax.set(xlim=[xmin-5, xmax+5], ylim=[ymin-5, ymax+5], zlim=[zmin-5, zmax+5])
    ax.set_box_aspect(None, zoom=0.9)
    ax.view_init(azim=-140)

fig.colorbar(C, ax=ax)

if args.outfile:
    fig.savefig('plot.'+mesh_file+'.png')
else:
    plt.show()
