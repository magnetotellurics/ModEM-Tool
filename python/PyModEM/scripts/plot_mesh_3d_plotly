#!/usr/bin/env python
import sys
import argparse
import numpy as np

import plotly.express as px
import plotly.graph_objects as go

from PyModEM import ModEMData

from mtpy import MTData
from mtpy.modeling import StructuredGrid3D

def get_mesh_grid(arry, mesh):
    return np.meshgrid(mesh.grid_north[1:], 
                       mesh.grid_east[1:],
                       mesh.grid_z[1:])

description = '''Create a 3D plot of ModEM Mesh/Model/Grid/Rho file with an optional slice.'''

parser = argparse.ArgumentParser(description=description)
parser.add_argument('rho_file', help='Filepath to the rho model', type=str)
parser.add_argument('-s', '--slice', help='X slice to take (to show within the mesh)', type=int, default=0)
parser.add_argument('-d', '--data', help='Data file to plot stations', type=str, default=None)

args = parser.parse_args()

mesh_file = args.rho_file
arr_slice = args.slice
data_filename = args.data

mesh = StructuredGrid3D()
mesh.from_modem(mesh_file)

res = np.log(mesh.res_model[:,:,:])
kw = { 'vmin' : res.min(), 'vmax' : res.max(), 'levels' : np.linspace(res.min(), res.max(), 10)}

x, y, z = get_mesh_grid(res, mesh)

x = x[:, :, :]
y = y[:, :, :]
z = z[:, :, :]

xmin = mesh.grid_east.min() * 1.1
xmax = mesh.grid_east.max() * 1.1
ymin = mesh.grid_north.min() * 1.1
ymax = mesh.grid_north.max() * 1.1


figure = go.Figure(data=go.Isosurface(
            x=x.flatten(),
            y=y.flatten(),
            z=-z.flatten(),
            value=res.flatten(),
            flatshading=True))


scatter = None
if data_filename:
    data = ModEMData.ModEMData(data_filename)
    xyz = data.get_station_xyzs()
    xyz[:,2] += 5000
    scatter = data=go.Scatter3d(x=-xyz[:,0],
                                y=-xyz[:,1], 
                                z=xyz[:,2], mode='markers')
    figure.add_trace(scatter)

figure.show()
