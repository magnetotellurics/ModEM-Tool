function varargout = PickModCells(varargin)
% PickModCells - A GUI tool for pick cells from a *.fig file which
%                generated by *pcolor*.
%
%  Usage:
%    PickModCells
%    sel = PickModCells
%    sel = PickModCells(xn,yn)
%    sel = PickModCells(xn,yn,sel)
%
%    Use LEFT mouse button to select.
%    Use RIGHT mouse button to unselect.
%    Use L/R mouse button down and move as brush to select or unselect.
%    Use <F2> to load an exised selection file.
%    Use <F3> to save current selection to a txt file.
%    Use <F4> to set the selection range. xrange=1 means one more block
%      will be selected at both the left and right sides of current selection.
%    Use <Enter> to finish the selection without close the figure.
%    Use <Shift+LEFT click> to active the displaying the current position.
%    Use standard figure toolbar to Zoom in and Zoom out.
%
%  NOTES: 
%  
%
%  See also ModelTrace.
%  --------------------
%  $Revision: 1.0 $ $Date: 2013/12/05 $
%  Last changed: 2013/12/17 19:39:43.

%  Revision log:
%  2013/12/05 : Created.
%  2013/12/17 : I)   Added F2 to load exised selection, F3 to save the
%                    selection to *.txt file.
%               II)  Added F4 to set the selection range.
%               III) Added SHIFT+LEFT click to active the displaying of
%                    current position.
%               IV)  Added L/R btn down and move as brush to select or unselect.

	global xn yn trace hrect xrange yrange bBtn
	xn = []; yn = []; trace = []; hrect = []; xrange = 0; yrange = 0; bBtn = 0;
	if nargin == 0
		% get the model file name and path.
		[figfile,figpath] = uigetfile('*.fig','Choose a matlab fig file');
		% read the model file.
		if (figfile ~= 0)
			open([figpath figfile]);
		else
			return;
		end % check model file name
		% get the grid size.
		h  = get(gca,'Children');
		xn = get(h,'Xdata');
		yn = get(h,'Ydata');
	elseif nargin == 2
		% use current figure (gcf) and provide X & Y coords from pcolor
		xn = varargin{1};
		yn = varargin{2};
	elseif nargin == 3
		xn = varargin{1};
		yn = varargin{2};
		trace = varargin{3};
	end
	hold on;
%
%  set all msg response functions.
%
	set(gcf,'WindowButtonDownFcn',{@ButtonDown_Callback});
	set(gcf,'CloseRequestFcn',{@CloseRequestFcn_Callback});
	set(gcf,'WindowKeyPressFcn',{@WindowKeyPressFcn_Callback});
	set(gcf,'WindowButtonMotionFcn',{@ButtonMove_Callback}); 
	set(gcf,'WindowButtonUpFcn',{@ButtonUp_Callback});
%
%
%  save the gui data.
%
	handles = guihandles(gcf);
	guidata(gcf,handles);
%
%  deal with the gui output.
%
	uiwait(gcf);
	if (nargout > 0)
		varargout(1) = {trace};
	end % nargout.
%
% end of main function.
%
%----------------------------------------------------------------------%
%                              msg callbacks                           %
%----------------------------------------------------------------------%
	function varargout = CloseRequestFcn_Callback(h,eventdata,handles)
		uiresume(h);
		delete(h);

	function WindowKeyPressFcn_Callback(h,evt)
		global trace xrange yrange
		switch evt.Key
		case 'return'
		%if (strcmp(evt.Key,'return'))
			uiresume(h);
		%end
		case 'f2' % load existed selection.
			% get the existed selection.
			[file,path] = uigetfile({'*.txt';'*.*'},'Choose a file');
			if (file ~= 0)
				trace = load([path file]);
			else
				return;
			end % check model file name
			% draw slice.
			handles = guidata(gcf);
			drawpicks(handles);
		case 'f3' % save selection to *.txt file.
			[file, path] = uiputfile('*.txt', 'Save selection as');
			if (file ~= 0)
				fid = fopen([path file],'w');
				for k = 1:length(trace)
					fprintf(fid,'%d %d\n',trace(k,1),trace(k,2));
				end % k
				fclose(fid);
			else
				return;
			end % check model file name
		case 'f4' % set xrange and yrange.
			prompt = {'X range:','Y range:'};
			dlg_title = 'Select range';
			num_lines = 1;
			def = {'1','1'};
			answer = inputdlg(prompt,dlg_title,num_lines,def);
			xrange = str2num(answer{1});
			yrange = str2num(answer{2});
			disp(['selection range: x=',sprintf('%d',xrange),' y=',sprintf('%d',yrange)]);
		otherwise
		end % switch key.

%----------------------------------------------------------------------%
	function ButtonDown_Callback(h, eventdata, handles, varargin)
		global trace MAP_PROJECTION xn yn xrange yrange bBtn
		bIsInAxes = IsInAxes;
		if bIsInAxes ~= 1
			return
		else
			CP = get(gca,'CurrentPoint');
			% if using m_map, m_proj has been set up
 			if exist('MAP_PROJECTION','var')
 				[x,y] = m_xy2ll(CP(1,1),CP(1,2));
 			else
				x = CP(1,1); y = CP(1,2);
			end
 			str = sprintf('Selected [%f,%f]',x,y);
 			disp(str);
			updatetrace(x,y);
		end
		% draw slice.
		handles = guidata(gcf);
		drawpicks(handles);

%----------------------------------------------------------------------%
	function ButtonUp_Callback(h, eventdata, handles, varargin)
		global bBtn
		bBtn = 0;

%----------------------------------------------------------------------%
	function ButtonMove_Callback(h, eventdata, handles, varargin)
		global bBtn MAP_PROJECTION
		ms = get(get(gca,'parent'),'SelectionType');
		if strcmp(ms,'extend') %SHFIT + LBtn down
			CP = get(gca,'CurrentPoint');
			% if using m_map, m_proj has been set up
 			if exist('MAP_PROJECTION','var')
 				[x,y] = m_xy2ll(CP(1,1),CP(1,2));
 			else
				x = CP(1,1); y = CP(1,2);
            end
            str = ['(',num2str(x,'%0.3g'),',',num2str(y,'%0.3g'),')'];
			if (isempty(findobj('tag','htext')))
				text(x,y,str,'tag','htext','VerticalAlignment','bottom');
			else
				ht = findobj('tag','htext');
				set(ht,'position',[x,y],'string',str);
			end % if
		end
		if bBtn ~= 0 % L/R btn down.
			CP = get(gca,'CurrentPoint');
			% if using m_map, m_proj has been set up
 			if exist('MAP_PROJECTION','var')
 				[x,y] = m_xy2ll(CP(1,1),CP(1,2));
 			else
				x = CP(1,1); y = CP(1,2);
			end
 			str = sprintf('Selected [%f,%f]',x,y);
 			disp(str);
			updatetrace(x,y);
			handles = guidata(gcf);
			drawpicks(handles);
		end % L/R btn.

%----------------------------------------------------------------------%
%                           general functions                          %
%----------------------------------------------------------------------%
	function updatetrace(x,y)
		global trace xn yn xrange yrange bBtn
		rtv = getindex(x,y);
			sel = rtv;
			for kx = sel(1,1)-xrange:sel(1,1)+xrange
				for ky = sel(1,2)-yrange:sel(1,2)+yrange
						if (kx > 0 && kx < length(xn) && ...
							ky > 0 && ky < length(yn))
							sel(end+1,1:2) = [kx ky];
						end % if
				end % ky
			end % kx
			sel = unique(sel,'rows');
			ms = get(get(gca,'parent'),'SelectionType');
			if strcmp(ms,'normal') %LBtn down
				if ~isempty(trace)
                    if (sel(1) > trace(end,1)) && (sel(2) < trace(end,2))
                        k = 1;
                        for i1 = trace(end,1):sel(1)
                            for i2 = trace(end,2):-1:sel(2)
                                rectangle_selection(k,1:2) = [i1 i2];
                                k = k+1;
                            end
                        end
                        str = sprintf('Selected a rectangle of %d cells',k-1);
                        disp(str);
                        %trace = union(trace,rectangle_selection,'rows');
                        trace = [trace; rectangle_selection];
                    else
                        %trace = union(trace,sel,'rows');
                        trace = [trace; sel];
                    end
				else
					trace = sel;
				end % if
				bBtn = 1;
			elseif strcmp(ms,'alt') %RBtn down
				if ~isempty(trace)
					trace = setdiff(trace,sel,'rows');
				else
					return
				end % if
				bBtn = -1;
			end

	function drawpicks(handles)
		global trace xn yn hrect MAP_PROJECTION
		ss = size(trace);
		kt = ss(1);
		if ~isempty(hrect)
			delete(hrect);
			hrect = [];
		end

		for kk = 1:kt
 			if exist('MAP_PROJECTION','var')
 				[xr,yr] = m_ll2xy(xn(trace(kk,1)),yn(trace(kk,2)));
 				[xr2,yr2] = m_ll2xy(xn(trace(kk,1)+1),yn(trace(kk,2)+1));
 				wr = xr2-xr;
 				hr = yr2-yr;
 			else
				xr = xn(trace(kk,1));
				yr = yn(trace(kk,2));
				wr = xn(trace(kk,1)+1) - xn(trace(kk,1));
				hr = yn(trace(kk,2)+1) - yn(trace(kk,2));
 			end
			hrect(kk) = rectangle('Position',[xr,yr,wr,hr],'LineWidth',2,'EdgeColor','r');
		end % kk

%----------------------------------------------------------------------%
	function rtv = getindex(x,y)
		global xn yn
		for ki = 1:length(xn)-1
			if (x>xn(ki) && x<xn(ki+1))
				rtv(1) = ki;
				break;
			end % if
		end % ki
		for kj = 1:length(yn)-1
			if (y>yn(kj) && y<yn(kj+1))
				rtv(2) = kj;
				break;
			end % if
		end % kj

%----------------------------------------------------------------------%
	function bIsInAxes = IsInAxes(hObject, eventdata)
		minx = min(get(gca,'xlim'));
		maxx = max(get(gca,'xlim'));
		miny = min(get(gca,'ylim'));
		maxy = max(get(gca,'ylim'));
		Point=mean(get(gca,'currentpoint'));
		if((Point(1)-minx)*(maxx-Point(1))>0 && (Point(2)-miny)*(maxy-Point(2))>0 );
			bIsInAxes = 1;
		else
			bIsInAxes = 0;
		end

