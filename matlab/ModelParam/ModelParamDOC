**********************************************************************
****************          Model Space I/O         ********************
**********************************************************************
**********************************************************************
>>> writeCond2D
writes CondParam object, provided as structure cond, to file cfile

Usage:  [status] = writeCond2D(cfile,cond)
        status is total number of bytes written
**********************************************************************

**********************************************************************
>>> readCond2D
Reads CondParam object from file cfile, returns as structure cond

Usage:  [cond] = readCond2D(cfile)
**********************************************************************

>>> writeCondMTX
Write sequence of Cond2D objects stored in cell array of structures

Usage: [status] = writeCondMTX(cfile,CONDS,header)
**********************************************************************

**********************************************************************
>>> readCondMTX
Reads in sequence of Cond2D objects, return as cell array of structures 

Usage:  [CONDS,header] = readCondMTX(cfile)

This routine is used to read in the sensitivity matrix, which is stored
as a cell array of Cond2D objects, one for each real observation
**********************************************************************




**********************************************************************
****************          Model Space algebra     ********************
**********************************************************************
**********************************************************************
>>> sumMod
Computes simple sum of model parameters m1 and m2, returning as a
model parameter structure

Usage: [m] = sumMod(m1,m2);
**********************************************************************

**********************************************************************
>>> linCombModMTX, AKA linCombMod
Computes linear combination of cell arrays of model parameter structures 
NOT FOR A SINGLE MODEL PARAMETER

Usage: [m] = linCombMod(c1,m1,c2,m2);
   m1 and m2 are input cell arrays of model parameters; c1 and c2
   are (in general complex) coefficients (vectors)
**********************************************************************

**********************************************************************
>>> linCombMod1
computes linear combination of model parameters
		m = c1*m1+c2*m2
This version is for a single model parameter
( should be renamed linCombMod

Usage: [m] = linCombMod(c1,m1,c2,m2);
**********************************************************************

**********************************************************************
>>> cTimesMod
Initial implementation of scalar multiplication of a model
space object by a real scalar; no error type checking;
scalar has to be first argument

Usage: [mOut] = cTimesMod(c,mIn)
**********************************************************************





**********************************************************************
***************   Model Space inner products     *********************
**********************************************************************
**********************************************************************
>>>  dotModMTX
model inner products for cell arrays of model parameters m1, m2
(does not use model covariance!) NOT FOR SINGLE MODEL PARAMTERS
Also called dotMod ... should remove redundency, rename dotMod1

Usage:  [ip] = dotModMTX(m1,m2);
        ip is output real vector of model space inner products,
        one for each pair of model parameters in cell arrays m1, m2
**********************************************************************

**********************************************************************
>>> dotMod1
Inner product of model parameters m1, m2 returning real number ip;
Should be renamed dotMod!

Usage:  [ip] = dotMod(m1,m2);
**********************************************************************

**********************************************************************
**********************************************************************


**********************************************************************
***************      Model Space Covariance      *********************
**********************************************************************
**********************************************************************
>>>   CovMult
Multiplies model parameter by covariance operator

Usage  : sout = CovMult(sIn,smthParams,nTimes)
   Input : sIn = input conductivity structure
          smthParams = structure with paramters to control smoothing
          nTimes = optional argument: number of times to apply 
		the smoother (default is 1)
   Output : sOut = smoothed output conductivity structure
**********************************************************************

**********************************************************************
>>>  InitCovMult(grid)
Sets parameters for covariance definition data structure

Usage: [CmHalf] = InitCovMult(grid);
  Returns parameters for Cm^{1/2};
**********************************************************************




**********************************************************************
***************          Model Space plots       *********************
**********************************************************************
**********************************************************************
>>>  plotCond
Plots conductivity model

Usage [h,hCB] = plotCond(m,grid,OPTIONS)
   m is the 2D conductivity model to plot
   grid is the model grid
   OPTIONS is a structure of plotting OPTIONS
          .nySkip = number of cells to omit from
                    each end of the profile
          .nZplot = number of vertical layers to plot
                    (starting from the earth surface)
          .ncax = color axis limits (vector with 2 elements)
          .title = plot title
**********************************************************************



**********************************************************************
***************          Model Space Plotting    *********************
**********************************************************************
**********************************************************************
>>> plotCond
Plots conductivity model

Usage [h,hCB] = plotCond(m,grid,OPTIONS)
	m is the 2D conductivity model to plot
	grid is the model grid
	OPTIONS is a structure of plotting OPTIONS
	.nySkip = number of cells to omit from each end of the profile
	.nZplot = number of vertical layers to plot
		(starting from the earth surface)
	.ncax = color axis limits (vector with 2 elements)
	.title = plot title
**********************************************************************

	

**********************************************************************
***************          Miscellaneous           *********************
**********************************************************************
**********************************************************************
>>> InitHalfSpace
Initialize a model parameter mOut as half space

Usage: [mOut] = InitHalfSpace(mIn,sig);
        mIn = template for model parameter
        sig = conductivity (NOT log conductivity, 
		or resistivity) for half space
**********************************************************************



**********************************************************************
***************          Test Scripts            *********************
**********************************************************************
**********************************************************************
>>>  TestCovMult
script used for initial testing of CovMult
