>>>>>>>>>>>>>>>          Data Vector I/O         <<<<<<<<<<<<<<<<<<<<<
**********************************************************************
>>> readZ
Reads data from impedance file, returns as cell array allData

Usage: [allData] = readZ(cfile)
   There is one cell per period; each cell contains all information 
   necessary to define data (locations, values, error standard dev) for
   each period/mode (transmitter)
**********************************************************************

**********************************************************************
>>> writeZ
Writes contents of cell array allData to file cfile.  

Usage:  [status] = writeZ(cfile,allData);
   There is one cell per period; each cell contains all information 
   necessary to define data (locations, values, error standard dev) for
   each period (transmitter).
**********************************************************************


**********************************************************************
>>>>>>>>>>>>>>>          Data Vector algebra     <<<<<<<<<<<<<<<<<<<<<
**********************************************************************
>>> linCombDat
computes d = c1*d1+c2*d2 for two data vector object; error bars are 
just copied from d1;

Usage : [d] = linCombDat(d1,c1,d2,c2);
        d1, d2 are input multi-transmitter data objects
        c1, c2 are (complex in general) scalars
        d  is output multi-transmitter data object
**********************************************************************

**********************************************************************
>>> cTimesDat
a very tentative implementation of multiplication
by scalars for data vector objects.  Ultimately
this might be extended to allow also for multiplication
by matrices.  Also now the scalar has to come first,
but this could be generalized ... and no error checking so far!

Usage: [dOut] = cTimesDat(alpha,dIn)
**********************************************************************

**********************************************************************
>>> minusDat(d1,d2);
Implements subtraction for data vector objects
so far error bars  are just copied from d1.

Usage : [d] = minusDat(d1,d2);
**********************************************************************

**********************************************************************
>>> plusDat(d1,d2);
Implements addition for data vector objects
so far error bars  are just copied from d1.

Usage : [d] = plusDat(d1,d2);
**********************************************************************

**********************************************************************
>>>>>>>>>>>>>>>    Data Vector normalization     <<<<<<<<<<<<<<<<<<<<<
**********************************************************************
>>> CdInv_d 
Used to normalize data vectors, dividing either by stadard 
deviations or variances

Usage: [dOut] = CdInv_d(dIn,Ntimes);
     Ntimes is 1 to divide by standard deviation
               2 to divide by variance
            This is optional, default is 1
**********************************************************************

**********************************************************************
>>> InvErrCov
Makes a standard real vector containing the inverse of the data 
error standard deviation from and input impedance data vector object

Usage:  CdInv = InvErrCov(dIn);
**********************************************************************

**********************************************************************
>>>>>>>>>>>>>>>    Data Vector inner products    <<<<<<<<<<<<<<<<<<<<<
**********************************************************************
>>> ipDat
Inner product of two complex data vector objects, using
error standard deviation defined from d1

Usage :  ip = ipDat(d1,d2);
         output ip is a complex scalar
**********************************************************************

**********************************************************************
>>> dotDat
Real inner product of two (complex impedance) data objects.  
Note that vectors are stored as complex objects, but the 
inner product corresponds to the real inner product of the 
corresponding real vectors of real and imaginary parts.

Usage :  ip = dotDat(d1,d2);
**********************************************************************

**********************************************************************
>>> ipDatNoCov
Inner product of two (complex impedance) data objects, ignoring 
error standard deviation (minor variant on ipDat)

Usage :  ip = ipDatNoCov(d1,d2);
         output ip is a complex scalar
**********************************************************************

**********************************************************************
>>> ipDatFreq
Inner product of two (complex impedance) data objects, 
separately for each frequency using error standard deviation  
defined from d1 (minor variant on ipDat)

Usage :  ip = ipDatFreq(d1,d2);
         output ip is a vector of inner products, 
         one for each frequency
**********************************************************************


**********************************************************************
>>>>>>>>>>>>>>>          Miscellaneous           <<<<<<<<<<<<<<<<<<<<<
**********************************************************************
>>> VecToDataVec
Converts a standard real vector to a complex impedance data vector 
object

Usage: [dOut] = VecToDataVec(dIn,dTemplate);
  Inputs:  dIn is a real vector
           dTemplate is a template data vector structure
**********************************************************************

**********************************************************************
>>> dataVecToVec
Makes a standard real vector out of a complex impedance
data vector object; if called with two arguments
Also returns data standard error as a vector

Usage: [dOut,dErr] = dataVecToVec(dIn);
**********************************************************************

**********************************************************************
>>> lengthDat
Total length of a data vector object

Usage [n] = lengthDat(d);
**********************************************************************

